<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $location, $timeout, $window, $document, $rootScope, spUtil, spAriaUtil, i18n, urlTools) {
	
    var c = this;

    // Initial load of the page
    loadPage();

    function loadPage() {
        // Set the selected catalog and hide category widget based on options
					
        $scope.selectedCatalog = c.data.catalogSelectorArr[c.data.selectedCatalogIndex];
        $scope.hideCategoryWidgetInXS = (c.options.hide_xs == 'true');
        if (c.data.categoryId) {
            if (!$scope.hideCategoryWidgetInXS)
                $scope.hideCategoryWidgetInXS = true;
        } else {
            if ($scope.hideCategoryWidgetInXS)
                $scope.hideCategoryWidgetInXS = false;
        }
        handleToolTip();

        // Handle keyboard events for select2 component
        $(document).on('keydown', '.select2-focusser', function(e) {
            if (e.which === 40 || e.which === 38) {
                $(this).closest(".select2-container").siblings('select:enabled').select2('open');
            }
        });
    }//END loadPage FUNCTION
	//================================================================
	

    function handleToolTip() {
        // Remove tooltip if the category name fits without scrolling
        $timeout(function() {
            $(".group-item").each(function(index) {
                var span = $(this).find(".category");
                if (span && span[0] && span.width() >= span[0].scrollWidth) {
                    $(this).removeAttr("title");
                    $(this).removeAttr("data-original-title");
                }
            });
        }, 100);
    }

    // Change the catalog and update URL parameters
    $scope.changeCatalog = function(selectedCatalog) {
        window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Browse", "Catalog Filter Changed");
        $timeout(function() {
            if (selectedCatalog && selectedCatalog.hasOwnProperty("value")) {
                $location.search('catalog_id', selectedCatalog.value ? selectedCatalog.value : -1);
                $location.search('sys_id', null);
                $location.search('spa', null);
            }
        });
    }

    // Get ARIA label for category
    $scope.getCategoryAriaLabel = function(category) {
        var label = c.data.messages.category + ' ' + category.title + ' ';
        if (c.options.omit_badges != 'true' && c.data.largeDataSet != 'true') {
            label += c.data.messages.containing + ' ' + category.totalCount + ' ';
            if (category.totalCount == 1)
                label += c.data.messages.item;
            else
                label += c.data.messages.items;
        }
        return label;
    }

    // Handle keyboard navigation for categories
    $scope.handleKeyPressOnCategory = function($event, category) {
        var currentElement = $($event.currentTarget);
        var allCategories = currentElement.closest('ul.category-list').find('.group-item');
        var index = -1;
        if (allCategories.length > 0) {
            index = allCategories.index(currentElement);
        }
        // Handle arrow key navigation
        switch ($event.which) {
            case 40: // Down key
                $event.stopPropagation();
                $event.preventDefault();
                if (index + 1 < allCategories.length) {
                    allCategories.get(index).setAttribute('tabindex', '-1');
                    allCategories.get(index + 1).setAttribute('tabindex', '0');
                    allCategories.get(index + 1).focus();
                }
                break;
            case 38: // Up key
                $event.stopPropagation();
                $event.preventDefault();
                if (index > 0) {
                    allCategories.get(index).setAttribute('tabindex', '-1');
                    allCategories.get(index - 1).setAttribute('tabindex', '0');
                    allCategories.get(index - 1).focus();
                }
                break;
            case 37: // Left key
                $event.stopPropagation();
                $event.preventDefault();
                if (category.showChildren) {
                    $scope.displayChildren($event, category);
                } else {
                    var parentSubcategory = currentElement.closest('ul.sub-category-list');
                    if (parentSubcategory) {
                        var closestParent = parentSubcategory.parent('li').find('.group-item');
                        if (closestParent && closestParent.length > 0) {
                            currentElement.attr('tabindex', -1);
                            closestParent.get(0).setAttribute('tabindex', 0);
                            closestParent.get(0).focus();
                        }
                    }
                }
                break;
            case 39: // Right key
                $event.stopPropagation();
                $event.preventDefault();
                if (!category.showChildren) {
                    $scope.displayChildren($event, category);
                } else if (category.subcategories && category.subcategories.length > 0) {
                    var closestChild = currentElement.next().find('.group-item');
                    if (closestChild && closestChild.length > 0)
                        currentElement.attr('tabindex', -1);
                    closestChild.get(0).setAttribute('tabindex', 0);
                    closestChild.get(0).focus();
                }
                break;
        }
    }

    // Set tabindex based on accessibility preference
    spUtil.getPreference('glide.ui.accessibility', function(value) {
        if (value == "true")
            $scope.tabindex = 0;
        else
            $scope.tabindex = -1;
    });

    // Display or hide category children
    $scope.displayChildren = function($event, category) {
        $event.stopPropagation();
        if (!category || !category.subcategories || category.subcategories.length === 0) {
            return;
        }
        category.showChildren = !category.showChildren;
        var currentElement = $($event.currentTarget);
        currentElement.closest('.list-group-item').attr('aria-expanded', category.showChildren);
        handleToolTip();
    };

    // Toggle subcategories visibility
    $scope.toggleSubCategories = function(val) {
        toggleSubCategories(c.data.categoriesList, val);
    };

    function toggleSubCategories(categories, val) {
        categories.forEach(function(category) {
            category.showChildren = val;
            if (category.subcategories && category.subcategories.length > 0) {
                toggleSubCategories(category.subcategories, val);
            }
        });
    }

    // Load more categories when user requests
    $scope.loadMore = function() {
        c.data.new_limit = c.data.limit + (c.options.number_of_categories_to_load || 15);
        c.data.more_msg = c.data.pleaseWait;
        var categoryDiffCounter = c.data.visibleCategories;
        c.server.update().then(function() {
            handleToolTip();
            if (!c.data.showMore)
                $('.sc_category_treeitem_0').focus();
            else {
                // Scroll to 'show more' button
                $scope.$$postDigest(function() {
                    var showMoreBtn = angular.element('#show-more-btn');
                    if (showMoreBtn && showMoreBtn.offset()) {
                        var scrollPosn = showMoreBtn.offset().top;
                        $("html, body").animate({
                            scrollTop: scrollPosn
                        });
                    }
                });
            }
            categoryDiffCounter = c.data.visibleCategories - categoryDiffCounter;
            i18n.getMessages(["Fetched", "additional {0}"], function(msgs) {
                var categoryMsg = i18n.format(msgs["additional {0}"], c.options.title);
                var concatMsg = msgs["Fetched"] + " " + categoryDiffCounter + " " + categoryMsg;
                spAriaUtil.sendLiveMessage(concatMsg);
            });
        });
    };

    // Handle category selection and update page state
    $scope.categorySelected = function($event, category) {
        var s = {
            'id': c.data.page || 'sc_category',
            'sys_id': category.sys_id,
            'catalog_id': c.data.catalog_id,
            'spa': 1
        };
        c.data.categoryId = category.sys_id;
        $rootScope.$broadcast('$sp.service_catalog.category.selected', s);
        $location.search(s);
        loadPage();
        $scope.displayChildren($event, category);
    };

    // Listener for showing categories widget
    var listenerForBrowseCategories = $scope.$on("$sp.service_catelog.show.categories_widget", function() {
        $scope.hideCategoryWidgetInXS = false;
    });

    // Hide categories widget and show items widget
    $scope.hideBrowseCategory = function() {
        $scope.hideCategoryWidgetInXS = true;
        $rootScope.$broadcast("$sp.service_catelog.show.items_widget", {
            setFocusOnAllCategsLink: true
        });
    }

    // Cleanup on destroy
    $scope.$on("$destroy", function() {
        listenerForBrowseCategories();
        locationChangeSuccessListener();
        locationURLChangeWatcher();
        destroyTooltips();
    });

    // Destroy tooltips
    function destroyTooltips() {
        var tooltips = $("body > .tooltip");
        if (tooltips.length != 0)
            tooltips.remove();
    }

    // Check if the device supports touch events
    $scope.isTouchDevice = function() {
        return ('ontouchstart' in $window);
    }

    // Get padding based on category level
    $scope.getCategoryPadding = function(categoryLevel) {
        if (categoryLevel >= 4)
            categoryLevel = 4;
        return 15 * categoryLevel + "px";
    }

    // Location change handler for back/forward buttons
    var locationChangeSuccessListener = $rootScope.$on('$locationChangeSuccess', function() {
        if ($location.search().spa) {
            var cat = c.data.selectedCategory;
            if (cat) {
                $timeout(function() {
                    $scope.categorySelected(null, cat);
                });
            }
        }
    });

    // Watch for URL changes
    var locationURLChangeWatcher = $scope.$watch(function() {
        return $location.url();
    }, function(newValue) {
        if (newValue.indexOf('spa') !== -1) {
            var cat = c.data.selectedCategory;
            if (cat) {
                $timeout(function() {
                    $scope.categorySelected(null, cat);
                });
            }
        }
    });
}]]></client_script>
        <controller_as>c</controller_as>
        <css>$sp-space--xxs: 2px !default;
		.category-widget {
			border: 1px solid $panel-inner-border;

			.category-list {
			.fa {
			margin-right: 5px;
			}
			.l-h-1_6x {
			line-height: 1.6em;
			}
			a {
			width: 100%;
			vertical-align: middle;
			display: inline-block;
			}
			.list-group {
			margin-bottom: 0;
			}
			.list-group-item {
			padding: 0;
			border: 0;
			}
			.group-item {
			padding: 10px 15px;
			border-left: 3px solid transparent !important;
			}
			.group-item-default {
			&amp;:hover, &amp;:focus {
			background-color: darken($panel-default-heading-bg, 2%);
			}
			}
			.group-item-primary {
			&amp;:hover, &amp;:focus {
			border-left: 3px solid $primary !important;
			border-right: 3px solid transparent !important;//For high contrast mode on windows
			border-top: none;
			border-bottom: none;
			}
			}
			.group-item-success {
			&amp;:hover {
			background-color: lighten($panel-success-heading-bg, 3%)
			}
			}
			.group-item-info {
			&amp;:hover, &amp;:focus {
			background-color: lighten($panel-info-heading-bg, 3%)
			}
			}
			.group-item-warning {
			&amp;:hover, &amp;:focus {
			background-color: $panel-warning-heading-bg
			}
			}
			.group-item-danger {
			&amp;:hover, &amp;:focus {
			background-color: lighten($panel-danger-heading-bg, 3%)
			}
			}

			.list-bg-default {
			background-color: $panel-default-heading-bg;
			}
			.list-bg-primary {
			background-color: lighten($panel-info-heading-bg, 6%);
			}
			.list-bg-success {
			background-color: lighten($panel-success-heading-bg, 6%);
			}
			.list-bg-info {
			background-color: lighten($panel-info-heading-bg, 6%);
			}
			.list-bg-warning {
			background-color: lighten($panel-warning-heading-bg, 3%);
			}
			.list-bg-danger {
			background-color: lighten($panel-danger-heading-bg, 6%);
			}
			}
			}
			.panel-primary .badge {
			background-color: $primary;
			color: $badge-color;
			}
			.panel-default .badge {
			background-color: $panel-default-text;
			color: $badge-color;
			}
			.panel-success .badge {
			background-color:  $panel-success-text;
			color: $badge-color;
			}
			.panel-info .badge {
			background-color: $panel-info-text;
			color: $badge-color;
			}
			.panel-warning .badge {
			background-color: $panel-warning-text;
			color: $badge-color;
			}
			.panel-danger .badge {
			background-color: $panel-danger-text;
			color: $badge-color;
			}
			.category-list .badge {
			text-align: right;
			}
			.text-active {
			color: $link-color;
			border-left: 3px solid $primary;
			font-weight: bold;
			}
			.text-default {
			color: $text-muted;
			}
			.close-button {
			padding: $sp-space--xxs;
			}

			.btn-link {
			color: $brand-primary-darker;
			}

			.panel &gt; .list-group:last-child .list-group-item:last-child, .panel &gt; .panel-collapse &gt; .list-group:last-child .list-group-item:last-child {
			border-bottom-right-radius: 0px;
			border-bottom-left-radius: 0px;
			}

		</css>
        <data_table>sp_instance</data_table>
        <demo_data>{"options" :&#13;
			{&#13;
			"hide_xs" : false&#13;
			}&#13;
			}</demo_data>
        <description/>
        <docs/>
        <field_list>color</field_list>
        <has_preview>true</has_preview>
        <id>hsc_sc_categories</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
    init = function() {
        var isOpen = false;
        scope.$evalAsync(function() {
            element.on("select2-open", function() {
                isOpen = true;
                element.parent().find(".select2-focusser").attr("aria-expanded", isOpen);
            });
            element.on("select2-close", function() {
                isOpen = false;
                element.parent().find(".select2-focusser").attr("aria-expanded", isOpen);
            });
        });

        setTimeout(function() {
            var select2Focusser = element.parent().find(".select2-focusser");
            var select2Results = element.parent().find("ul.select2-results");
            select2Focusser.attr("aria-expanded", isOpen);
            select2Focusser.attr("aria-owns", select2Results.attr("id"));
            select2Results.attr("aria-labelledby", "catalog_title");
        }, 500);
    };
    init();
}]]></link>
        <name>HSC SC Categories</name>
        <option_schema>[{"name":"hide_xs","default_value":false,"section":"Behavior","label":"Hide at XS","type":"boolean"},{"name":"omit_badges","section":"Behavior","default_value":"true","label":"Omit badges (may impact performance for large items in categories)","type":"boolean"},{"name":"check_can_view","default_value":"true","section":"Behavior","label":"Check canView per item","type":"boolean"},{"hint":"Choose between a flattened and a nested category structure (Nested may impact performance for large items in categories)","name":"category_layout","section":"Presentation","default_value":"Nested","label":"Category Layout","type":"choice","choices":[{"label":"Flat","value":"Flat"},{"label":"Nested","value":"Nested"}]},{"displayValue":"Page","name":"page","section":"Data","label":"page","type":"reference","value":"sp_page","ed":{"reference":"sp_page"}},{"hint":"Number of categories to load on page load","name":"number_of_categories_to_load","section":"Data","default_value":"15","label":"Number of categories to load","type":"integer"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {	
	//Catalog Id = 3b5b8d7d93bc42105d94371efaba103b - CHECK LIVE SITE. PREVIEW HERE IS WHACK!
	// Retrieve the catalog ID from the widget parameter or set it to "-1" if not provided
	//catalog_id = 3b5b8d7d93bc42105d94371efaba103b
	var catalog_id = $sp.getParameter("catalog_id") ? $sp.getParameter("catalog_id") + "" : "-1";

	// Initialize the catalog selector array with an "All" option
	//gs.getMessage("All") goes to table sys_ui_message >Column called "key" > Record where key = "All", returns "Message" column VALUE.
	var catalogSelectorArr = [{
		value: "-1",
		displayValue: gs.getMessage("All")
	}];

	// Determine if the selected catalog is accessible via the portal
	data.selectedCatalogIndex = catalog_id == -1 ? 0 : -1;	
	data.visibleCategories = 0;//CHECK THIS ONE LATER

	// Retrieve and split the catalog IDs into an array
	//By concatenating value with an empty string (""), any numeric or other non-string data is coerced into a string format.
	var catalogIDs = $sp.getCatalogs().value + "";//Checks sc_catalog table & returns: 	3b5b8d7d93bc42105d94371efaba103b,e0d08b13c3330100c8b837659bba8fb4,742ce428d7211100f2d224837e61036d	
	//MY WORKAROUND TO ONLY SHOW THE HSC CATALOG
	//var catalogs = catalogIDs.split(",");//Original Code	
	var catalogs = ["3b5b8d7d93bc42105d94371efaba103b"];

	// Check if the selected catalog ID is in the list of catalogs
	var isCatalogAccessibleViaPortal = catalog_id == -1 ? true : false;
	catalogs.forEach(function(catalogSysId) {
		if (catalog_id == catalogSysId) {
			isCatalogAccessibleViaPortal = true;
		}
	});

	// Initialize a counter and iterate through catalogs to populate the selector array
	var counter = 1;
	catalogs.forEach(function(catalogSysId) {
		var catalog = new sn_sc.Catalog(catalogSysId);
		var catalogObj = {
			value: catalogSysId,
			displayValue: catalog.getTitle()
		};
						
		if (catalog.canView()) {
			if (catalog_id === catalogSysId) {
				data.selectedCatalogIndex = counter;
			}
			catalogSelectorArr.push(catalogObj);
			counter++;
		}
	});
	data.catalogSelectorArr = catalogSelectorArr;

	// Prepare localized messages for UI elements
	data.catalog_id = catalog_id ? catalog_id : "-1";
	data.showMoreMsg = gs.getMessage("Show More {0}", options.title);
	data.pleaseWait = gs.getMessage("Please wait... fetching {0}", options.title);
  
	// Retrieve the category ID from parameters and ensure it's valid
	var categoryId = global.JSUtil.nil($sp.getParameter('sys_id')) ? "" : $sp.getParameter('sys_id') + "";
	data.categoryId = categoryId;
	var catalogIDs = (data.catalog_id && data.catalog_id !== "-1") ? data.catalog_id : $sp.getCatalogs().value + "";

	// Initialize variables for category view type and badge display
	var viewType = '';
	var checkCanView = false;
	var showBadge = false;
	var nestedLayout = (options.category_layout !== "Flat");
	var dynamicCategory = false;

	// Split and filter the catalog IDs
	var catalogArr = catalogIDs.split(",");
	var catalogs = [];
	catalogArr.forEach(function(catalogSysId) {
		var catalog = new sn_sc.Catalog(catalogSysId);
		if (catalog.canView()) {
			catalogs.push(catalogSysId);
		}
	});

	// Initialize message object for various labels
	data.categoryId = categoryId;
	var msg = data.messages = {};
	msg.catalogTitle = options.catalog_title ? gs.getMessage(options.catalog_title) : gs.getMessage('Catalogs');
	msg.category = gs.getMessage("category");
	msg.selected = gs.getMessage("selected");
	msg.containing = gs.getMessage("containing");
	msg.item = gs.getMessage("item");
	msg.items = gs.getMessage("items");
	msg.expand = gs.getMessage("Expand");
	msg.collapse = gs.getMessage("Collapse");

	// Check for large data set optimization 
	//check the glide property, if not found or not set, then set it to 'false'.
	data.largeDataSet = gs.getProperty("glide.sc.largeSet.optimization.enable", "false");
	if (data.largeDataSet == 'true')
		nestedLayout = false;

	// Retrieve and process the page record if provided
	if (options.page) {
		var page = new GlideRecord('sp_page');
		if (page.get(options.page))
			data.page = page.id + '';
	}

	// Set flags for view permissions and badge display
	checkCanView = String(options.check_can_view) == 'true';
	showBadge = String(options.omit_badges) == 'false';

	// Exit if the catalog is not accessible via the portal
	if (!isCatalogAccessibleViaPortal) {
		return;
	}

	// Initialize categories list and paging variables
	data.categoriesList = [];
	var categoriesInPage = options.number_of_categories_to_load || 15;
	data.limit = categoriesInPage;
	if (input && input.new_limit) {gs.addInfoMessage("inside INPUT");
		data.limit = input.new_limit;
	}
	
		
	if (input && input.categoriesList){		gs.addInfoMessage("inside INPUT2")
		data.categoriesList = input.categoriesList.slice(); // Copy the input array
	}
		
	if (input && input.startWindow) {gs.addInfoMessage("windowwwwwww")
		data.endWindow = input.endWindow;
	} else {
		data.startWindow = 0;
		data.endWindow = 0;
	}

	// Fetch categories within the specified window
	while (data.categoriesList.length < data.limit + 1) {
		data.startWindow = data.endWindow;
		data.endWindow = data.endWindow + categoriesInPage;
		var catGr = queryCategory(catalogs, nestedLayout, dynamicCategory, data.startWindow, data.endWindow);
		if (!catGr.hasNext())
			break;	
		
		fetchCategories(catGr, data.categoriesList);
	}

	// Calculate the number of visible categories
	for (var i = 0; i < data.limit; i++) { 
		//I ADDED data.categoriesList[i] &&
		if (data.categoriesList[i] && data.categoriesList[i].totalCount > 0) {
			data.visibleCategories++;
		} 
		
	}

	// Filter and prepare the visible categories list
	data.visibleCategoriesList = data.categoriesList.filter(function(category) {
		return category.totalCount > 0;
	});
	if (data.visibleCategoriesList.length > 0) {
		data.visibleCategoriesList[0].isFirstCategory = true;
	}

	// Determine if "Show More" button should be displayed
	if (data.visibleCategoriesList.length > data.limit)
		data.showMore = true;
	else
		data.showMore = false;

	// Prepare message for showing categories
	data.more_msg = gs.getMessage("Showing {0} categories", data.visibleCategories + "" || categoriesInPage);

	// Function to fetch categories from the GlideRecord object
	function fetchCategories(categoriesGr, categories) {
		while (categoriesGr.next()) {
			var categoryJS = new sn_sc.CatCategory(categoriesGr.getUniqueValue() + '');
			if (!categoryJS.canView())
				continue;
			var categoryDetails = getCategoryDetails(categoryJS, 0);
			categoryDetails.sys_id = categoriesGr.getUniqueValue();
			categories.push(categoryDetails);
		}
	}

	// Function to query categories from the GlideRecord object
	function queryCategory(catalogs, nestedLayout, dynamicCategory, startWindow, endWindow) {
		var categoriesGr = new GlideRecord('sc_category');
		categoriesGr.addQuery("sc_catalog", catalogs);
		if (!dynamicCategory)
			categoriesGr.addQuery("sys_class_name", "sc_category");
		categoriesGr.addActiveQuery();
		categoriesGr.orderBy('order');
		categoriesGr.orderBy('title');
		if (nestedLayout)
			categoriesGr.addNullQuery("parent");
		categoriesGr.chooseWindow(startWindow, endWindow);
		categoriesGr.query();
		
		return categoriesGr;
	}
//==========================================================
	// Function to get the item count for a category
	function getItemCount(categoryJS) {
		if (showBadge)
			return checkCanView ? categoryJS.getViewableItemsCount(true) : categoryJS.getItemsCount(true);
		else
			return categoryJS.hasVisibleItem(true, checkCanView) ? 1 : 0;
	}

	// Function to get detailed information about a category
	function getCategoryDetails(categoryJS, level) {
		var categoryDetails = {};
		var showChildren = false;
		if (!categoryJS) {
			return categoryDetails;
		}
		categoryDetails.title = categoryJS.getTitle();
		categoryDetails.level = level;
		categoryDetails.description = categoryJS.getDescription();
		categoryDetails.full_description = categoryJS.getFullDescription();
		categoryDetails.icon = categoryJS.getIconSRC();
		categoryDetails.header_icon = categoryJS.getHeaderIconSRC();
		categoryDetails.homepage_image = categoryJS.getHomepageImageSRC();
		categoryDetails.sys_id = categoryJS.getID();
		categoryDetails.showChildren = (categoryDetails.sys_id === categoryId);
		categoryDetails.catalog = {
			"sys_id": categoryJS.getCatalog(),
			"title": new sn_sc.Catalog(categoryJS.getCatalog()).getTitle()
		}
		categoryDetails.count = categoryDetails.totalCount = ((data.largeDataSet != 'true') ? getItemCount(categoryJS) : 1);
		if (catalog_id == -1 && catalogSelectorArr.length > 2)
			categoryDetails.catalog_tooltip = gs.getMessage("[{0}]", categoryDetails.catalog.title);
		else
			categoryDetails.catalog_tooltip = '';

		// Handle nested categories if applicable
		var subCategoryCounts = 0;
		if (nestedLayout) {
			var subcategories = categoryJS.getViewableSubCategories();
			if (subcategories.length == 0) {
				categoryDetails.subcategories = [];
			} else {
				categoryDetails.subcategories = [];
				subcategories.forEach(function(subCategory) {
					var subCategoryJS = new sn_sc.CatCategory(subCategory.sys_id + '');
					var category = getCategoryDetails(subCategoryJS, level + 1);
					categoryDetails.totalCount = categoryDetails.totalCount + category.totalCount;
					categoryDetails.subcategories.push(category);
					categoryDetails.subcategory_tooltip = gs.getMessage("[{0}]", categoryDetails.title);
					showChildren = true;
				});
			}
		}
		categoryDetails.hasChildren = (categoryDetails.subcategories && categoryDetails.subcategories.length > 0) || (data.showMore && data.visibleCategoriesList.length > data.limit);
		return categoryDetails;
	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-08-03 08:23:57</sys_created_on>
        <sys_id>53bddca183378650fa6256a6feaad3a8</sys_id>
        <sys_mod_count>155</sys_mod_count>
        <sys_name>HSC SC Categories</sys_name>
        <sys_package display_value="HSC Employee Center" source="x_1093559_hsc_em_0">2a4bbb98933c42105d94371efaba10a0</sys_package>
        <sys_policy/>
        <sys_scope display_value="HSC Employee Center">2a4bbb98933c42105d94371efaba10a0</sys_scope>
        <sys_update_name>sp_widget_53bddca183378650fa6256a6feaad3a8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-08-06 04:45:41</sys_updated_on>
        <template><![CDATA[
<section aria-label="${Service Catalog categories}">
  <div ng-if="c.data.catalogSelectorArr.length > 2" ng-class="{'hidden-xs' : hideCategoryWidgetInXS}" class="panel panel-{{::options.color}} category-widget no-border">
  <div class="panel-primary panel-heading">
    <h2 class="h4 panel-title">
      {{::data.messages.catalogTitle}}
    </h2>
  </div>
  <ul class="list-group category-list" id="catalog_title" data-label="Catalogs" aria-label="{{::data.messages.catalogTitle}}">
    <li class="list-group-item text-overflow-ellipsis" ng-include="'catalog-template.html'"></li>
  </ul>
</div>
<script type="text/ng-template" id="catalog-template.html">
  <select class="sc-basic-select" aria-label="{{::data.messages.catalogTitle}}" ng-change="changeCatalog(selectedCatalog)" sn-focus="true" ng-model="selectedCatalog" ng-options="catalog.displayValue for catalog in c.data.catalogSelectorArr track by catalog.value"></select>
</script>

<div ng-class="{'hidden-xs' : hideCategoryWidgetInXS}" class="panel panel-{{::options.color}} category-widget no-border">
  <div class="panel-heading">
	<span class="pull-right visible-xs" >
		<i class="fa fa-times-circle close-button" ng-click="hideBrowseCategory()" tabindex="0" data-original-title="${Close category explorer}" data-toggle="tooltip" data-placement="bottom"></i>
	</span>
    <h2 class="h4 panel-title">
      <span ng-if="::options.glyph">
        <fa name="{{::options.glyph}}"></fa>
      </span>{{::options.title}}</h2>
  </div>
  <ul class="list-group category-list" role="tree" data-label="Catalog filters" aria-label="{{::options.title}}">
    <li role="{{category.subcategories.length > 0 ? 'treeitem': 'none'}}" 
        class="list-group-item text-overflow-ellipsis" 
        ng-if="category.totalCount > 0" ng-include="'category-template.html'"
        ng-repeat="category in data.visibleCategoriesList | limitTo: data.limit track by category.sys_id"> 
    </li>
  </ul>
  <div class="panel-footer text-center" ng-if="data.showMore">
    <button class="text-center btn-link" ng-click="loadMore()" id="show-more-btn">{{::data.showMoreMsg}}</button>
    <div class="text-muted text-center">
      {{data.more_msg}}
    </div>
  </div>
</div>
<script type="text/ng-template" id="category-template.html">
	<div ng-click="categorySelected($event, category)"
  	ng-keydown="handleKeyPressOnCategory($event, category)"
	sn-focus="category.sys_id == data.categoryId"
	ng-enabled="category.totalCount > 0"
    role="treeitem" 
    aria-current ="{{category.sys_id == data.categoryId}}"
    ng-class="{true: 'text-active', false: ''}[category.sys_id == data.categoryId]"
    tabindex="{{category.isFirstCategory ? '0' : '-1'}}"
    class="group-item group-item-primary pointer sc_category_treeitem_{{::data.visibleCategoriesList.indexOf(category)}}" data-ng-attr-style="padding-left:{{getCategoryPadding(category.level + 1)}}"
    title="{{::category.title}} {{::category.catalog_tooltip}}"
    data-toggle="{{!isTouchDevice() ? 'tooltip' : undefined}}"
    data-placement="top"
    data-container="body"
    data-ng-attr-aria-label="{{getCategoryAriaLabel(category)}}"
    ng-attr-aria-expanded="{{category.subcategories.length > 0 && category.totalCount > category.count ? category.showChildren : undefined}}">
    <div role="none">
    	<i ng-if="::category.subcategories.length > 0 && category.totalCount > category.count" 
      	class="l-h-1_6x pull-left fa collapse-icon" 
        data-toggle="tooltip"
        data-placement="right"
        data-original-title="{{category.showChildren ? data.messages.collapse : data.messages.expand}}"
        ng-class="{true: 'fa-minus-square-o', false: 'fa-plus-square-o'}[category.showChildren]"
        ng-click="displayChildren($event, category)">
  		</i>
      <span class="badge pull-right pointer" ng-if="options.omit_badges != 'true' && data.largeDataSet != 'true'">{{::category.totalCount}}</span>
      <span class="block text-overflow-ellipsis category" id="{{::category.sys_id}}">{{::category.title}}</span>
    </div>
  </div>
 	<ul class="list-group sub-category-list list-bg-primary" role="group" aria-label="{{category.title}} ${subcategories}" ng-if="category.showChildren && category.subcategories.length > 0" ng-class="{true: 'no-indent', false: ''}[category.level > 2]">
  	<li role="{{category.subcategories.length > 0 ? 'treeitem': 'none'}}"  
    	class="list-group-item text-overflow-ellipsis" 
      ng-include="'category-template.html'" 
      ng-repeat="category in category.subcategories track by category.sys_id" 
      ng-if="category.totalCount > 0">
    </li>
  </ul>
</script>
</section>

]]></template>
    </sp_widget>
</record_update>
