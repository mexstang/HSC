<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope, $location, $rootScope, spUtil, $interpolate) {
	var c = this;

	this.data.filterText = "";
	this.showFilter = false;

	this.onClick = function($event, item, url, action) {
		$event.stopPropagation();
		$event.preventDefault();
		if (typeof url == "string") {
			var urlExp = $interpolate(url);
			url = urlExp(item);
			$location.url(url);
		} else if (url && typeof url == "object")
			$location.search(url);
		else {
			var evt = {};
			evt.url = url;
			evt.table = item.className;
			evt.sys_id = item.sys_id;
			evt.record = item;
			evt.rectangle_id = c.options.sys_id;
			evt.action = action;
			// put out the selection with simple list "sl_" prefix
			$location.search('sl_sys_id', evt.sys_id);
			$location.search('sl_table', evt.table);
			$location.search('spa', 1); // spa means "I've got this"
			$rootScope.$broadcast('$sp.list.click', evt);
		}
	};

	if (c.options.table && c.options.disable_record_watcher != 'true'){
		spUtil.recordWatch($scope, c.options.table, c.options.filter);
	}

	this.getMaxShownLabel = function(maxEntries, totalCount) {
		if(maxEntries == -1){
		    maxEntries = totalCount;
		}
		if (totalCount == c.data.maxCount || c.data.showGM) {
			if(maxEntries == 1){
				return "${Showing [0] record}".replace('[0]', maxEntries);
			}
			return "${Showing first [0] records}".replace('[0]', maxEntries);
		}
		return "${First [0] of [1]}".replace('[0]', maxEntries).replace('[1]', totalCount);
	};

	this.seeAllPage = c.options.list_page_dv || 'list';
	this.targetPageID = (c.options.sp_page) ? "&target_page_id=" + c.options.sp_page : "";

	c.getMaxHeight = function() {
		return c.options.panel_body_height || 'none';
	};

	c.getActionColor = function(action) {
		return "text-" + action.color;
	};

	c.update = function update() {
			c.server.update();
	}

	c.toggleFilter = function() {
		c.showFilter = !c.showFilter;
	}
//================Click a Question to get the Answer=================
	 // Initialize an empty object to keep track of visibility
  c.visibleItems = {};

  // Function to toggle visibility of a specific item
  c.showHideAnswer = function(sysId) {
    c.visibleItems[sysId] = !c.visibleItems[sysId]; // Toggle visibility
  };

  // Function to check if an item should be visible
  c.isVisible = function(sysId) {
    return c.visibleItems[sysId] || false; // Return visibility state
  };
	
	
	//===========================
	
	
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel {
  position: relative;

  height:500px;
}

/* My additions 
.panel-heading {
background:gold;
}

h3{
background:orange;
}

.xfilter{
background:red;
height:100px;
}

.list-group{
background:lightblue;
color:black; 

}

.list-group-item{
color:black;
background:lightgreen;
}

.text-muted{
color:black;
}
*/
button{
  background:transparent;
  border:none;

}
.headingSpan{
  display: flex;
  color:black;
  text-shadow:1px 1px 2px gray;
  font-size:18px;
  font-weight:bold;
}
.headingText{
  color:black;
  text-shadow:1px 1px 2px gray;
  font-size:18px;
  font-weight:bold;
}
/* END My additions */

.panel-heading i {

  cursor: pointer;
  position: absolute;
  padding: 10px;
  top: 0px;
  right: 0px;
  cursor: pointer;
}

.disabled-filter {
  color: #A0A0A0;
}

.list-group-item.ng-enter {
  transition: all 1s;
  -webkit-transition: all 1s;

  background-color: #c0dcfa;
}

.list-group-item.ng-enter-active {
  background-color: #fff;
}

.hide-x-overflow {
  overflow-x: hidden;
}

.translated-html &gt; p {
  margin: 0px;
  padding: 0px;
}

IMG {
  max-width: 320px;
  max-height: 240px;
}

IMG.img-sm {
  max-height: 40px;
  max-width: 40px;
}

.filter-box {
  margin-top: 10px;
}

.panel-footer {

  .number-shown-label {
    margin-top: 0;
    margin-bottom: 0;
    font-size: 16px;
    display: inline-block;
  }

  a {
    color: inherit;
  }
}

.panel-title .fa {
  padding-right: 4px;
}

.list-group-item &gt; a {
  display: inline-block;

}</css>
        <data_table>sp_instance_vlist</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>table,filter,maximum_entries,display_field,color,size,glyph,sp_page</field_list>
        <has_preview>true</has_preview>
        <id>hsc_simple_list</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>HSC Simple List</name>
        <option_schema>[{"name":"always_show","section":"Behavior","label":"Show even when empty","type":"boolean"},{"name":"panel_body_height","section":"Presentation","label":"List body height","type":"string"},{"name":"image_field","section":"Presentation","label":"Image field","type":"field_name"},{"name":"secondary_fields","section":"Data","label":"Secondary fields","type":"field_list"},{"name":"rounded_images","section":"Presentation","label":"Rounded images","type":"boolean"},{"displayValue":"Page","name":"list_page","section":"Data","label":"List page","type":"reference","value":"sp_page","ed":{"reference":"sp_page"}},{"name":"hide_footer","section":"Presentation","label":"Hide Footer","type":"boolean"},{"displayValue":"UI View","hint":"View to use when target page is a form","name":"view","section":"Behavior","label":"View","type":"reference","value":"sys_ui_view","ed":{"reference":"sys_ui_view"}},{"hint":"If checked, Simple List will not automatically updated based on changes to the filtered records","name":"disable_record_watcher","section":"Behavior","label":"Disable record watcher","type":"boolean"},{"name":"filter_acls","section":"Data","default_value":"false","label":"Enforce field-level Read ACLs on Filter query terms (may alter the query for unprivileged users)","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function () {
	//gs.addErrorMessage('1');
	//Sets 2 properties
	//Gets Messages from table sys_ui_message
	//passing the field called 'key'
	data.filterMsg = gs.getMessage("Filter...");
	data.viewAllMsg = gs.getMessage("View all");
	//gs.addErrorMessage('2');
	//Checks the options object to see if
	//the hide_footer box was checkmarked
	//nil means null or undefined
	if (gs.nil(options.hide_footer))
		options.hide_footer = false;
	//gs.addErrorMessage('3');
	//Makes sure options.hide_footer is a boolean
	//Gets URL parameter 't' value OR uses options.table value
	//This is an expression similar to an If statement - 
	//-> (options.hide_footer == "true" || options.hide_footer == true)
	options.hide_footer = (options.hide_footer == "true" || options.hide_footer == true);
	options.table = $sp.getParameter('t') || options.table;
	//gs.addErrorMessage('4');
	//If options.table is empty, return
	//gs.addErrorMessage('xx5');
	if (!options.table){
		//gs.addErrorMessage('zzzzzzzzz5');
		return;
	}
	//gs.addErrorMessage('5');
	//A class is created and its method is used to check if the user is allowed
	//access the options.table
	if(!new global.SPWidgetAccessControl().hasPublicAccess(options.table, $sp, options, input)){
		gs.warn("Deny access to table which is not public: " + options.table);
		data.isValid = false;
		return;
	}
	//gs.addErrorMessage('6');
	//A glide record is created to query options.table
	//Using GlideRecordSecure includes ACL checking
	var gr = new GlideRecordSecure(options.table); // does ACL checking for us
	if (!gr.isValid()) {
		data.isValid = false;
		return;
	} else{
		data.isValid = true;
		//	gs.addErrorMessage('isValid = true');
	}
	// grTemp is used to check isValidField since using GlideRecordSecure 
	//fails for date/time fields
	//Checks the sys_properties table to see if the passed property record is true
	//if true, it uses the $sp objects method to add a query. $sp has other methods that can be performed 
	//and it is service portal compatible
	//if false, it adds the regular encoded query directly. This doesn't have the ability to do anything else.
	var grTemp = new GlideRecord(options.table);
	var enforceAclForEncodedQuery =  gs.getProperty('glide.service_portal.enable_acls_for_encoded_query_in_list' , 'true');

	if( enforceAclForEncodedQuery === 'true' || options.filter_acls == "true"){
		gr = $sp.addQueryString(gr, options.filter);
	}else{
		gr.addEncodedQuery(options.filter);
	}

	//gs.addInfoMessage("addEncodedQuery");
	//From left to right - set options.title to options.title. If not provided, then get the plural form of the table name.
	//also set diplay_field property - get 'f' from the url. If not available, then use options.display_field value.
	options.title = options.title || gr.getPlural();
	options.display_field = $sp.getParameter('f') || options.display_field;

	// If options.display_field is not defined or invalid, it sets it to the display name of the table.
	if (!options.display_field || !grTemp.isValidField(options.display_field))
		options.display_field = gr.getDisplayName();

	//If input.filterText is provided, it adds a query string to filter records based on options.display_field and input.filterText.
	if (input && input.filterText)
		gr = $sp.addQueryString(gr, options.display_field + "LIKE" + input.filterText);


	//From left to right - set options.title to options.title. If not provided, then get the plural form of the table name.
	//also set diplay_field property - get 'f' from the url. If not available, then use options.display_field value.
	// Repeats the assignment of options.title. It initializes options.secondary_fields as a list by splitting it on commas.
	options.title = options.title || gr.getPlural();
	options.secondary_fields = options.secondary_fields || "";
	options.secondary_fields = options.secondary_fields.split(",");

	// If options.order_by is not provided or invalid, it sets options.order_by to options.display_field.
	if (!options.order_by || !grTemp.isValidField(options.order_by))
		options.order_by = options.display_field;

	// Set ID of sp_page from option schema
	//If options.list_page is provided, it retrieves the record from 
	//the sp_page table and sets options.list_page_dv to the display 
	//value of the ID.
	if (options.list_page) {
		var sp_page = GlideRecord('sp_page');
		if (sp_page.get(options.list_page))
			options.list_page_dv = sp_page.getDisplayValue('id');
	}

	// redo query with limit
	// Orders the query results based on options.order_direction, either ascending or descending.
	if (options.order_direction == "asc")
		gr.orderBy(options.order_by);
	else
		gr.orderByDesc(options.order_by);

	//Sets a limit of 500 records for the query and executes it.
	data.maxCount = 500;
	gr.setLimit(data.maxCount);
	gr.query();
	//gs.addErrorMessage("line: 106")

	/* Initializes data.actions by calling getActions(). 
	Sets up an empty array for data.list and initializes counters. 
	Retrieves the total row count and checks if ACL checks for row 
	count are disabled. Iterates through the records, 
	incrementing counters and checking if the maximum number of 
	entries is reached. If disableAclCheckForRowCount is 'false',
	it continues to the next record; otherwise, it breaks the loop. */

	//	gs.addErrorMessage("line: 116")
	data.actions = getActions();
	//gs.addErrorMessage("line: 117" + data.actions)

	//gs.addErrorMessage('actions');
	data.list = [];
	var recordIdx = 0;
	var listCount = 0;
	var rowCount = gr.getRowCount();
	var disableAclCheckForRowCount = gs.getProperty('glide.service_portal.disable_acl_check_for_row_count' , 'false');
	while (gr.next()) {
		listCount++;
		if (options.maximum_entries && recordIdx == options.maximum_entries) {
			if(disableAclCheckForRowCount == 'false')
				continue;
			else break;
		}

		/*  Creates an empty record object. If there are actions, it retrieves all fields from the record and 
		populates record with field names and values, excluding those starting with "sys_". */ 
		var record = {};
		if (data.actions.length > 0) {
			var fields = gr.getFields();
			for (var i = 0; i < fields.size(); i++) {
				var glideElement = fields.get(i);
				var name = glideElement.getName();
				if (name.indexOf("sys_") == -1)
					record[name] = gr.getValue(name);
			}
		}

		/*  Adds sys_id and className to record. If options.image_field is defined, it retrieves the 
		display value for the image field. If no image is found, it defaults to "noimage.pngx".  */
		record.sys_id = gr.getValue('sys_id');
		record.className = gr.getRecordClassName();
		if (options.image_field) {
			record.image_field = gr.getDisplayValue(options.image_field);
			if (!record.image_field)
				record.image_field = "noimage.pngx";
		}

		if (options.display_field)
			record.display_field = getField(gr, options.display_field);

		// Initialize secondary fields that were added to the options object via the widget.
		record.secondary_fields = [];
		options.secondary_fields.forEach(function(f) {
			record.secondary_fields.push(getField(gr, f));
		});

		//Check if sp_page is specified
		if (options.sp_page) {
			var view = "sp";
			if (options.view) {
				var viewGR = new GlideRecord("sys_ui_view");
				viewGR.get(options.view);
				view = viewGR.getValue("name");
			}
			record.url = {id: options.sp_page, table: record.className, sys_id: record.sys_id, view: view};
		} else if (options.url != '')
			record.url = options.url;
		else
			record.url = null;

		//Add the record to the list and increment the index
		data.list.push(record);
		recordIdx++;
	}

	//End While loop
	//Set the count and visibility for generic message
	data.count = disableAclCheckForRowCount == 'false' ? listCount : rowCount;
	data.showGM = rowCount >= 500; //showGM --> showGenericMessage

	//Define getField function
	function getField(gr, name) {
		var f = {};
		f.display_value = gr.getDisplayValue(name);
		f.value = gr.getValue(name);
		var ge = gr.getElement(name);
		if (ge == null)
			return f;

		f.type = ge.getED().getInternalType();
		if (f.type == "glide_date_time")
			f.isFuture = gs.dateDiff(gr.getValue(name), gs.nowNoTZ(), true) < 0;
		else if (f.type == "glide_date")
			f.isFuture = gs.dateDiff(gr.getValue(name), gs.now(), true) < 0;
		f.label = ge.getLabel();
		return f;
	}

	//Define getActions function
	function getActions() {
		//return JSON.parse($sp.getSPVlistActions($sp.getValue("sys_id")));	}
		return [];
	}
})()


















]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-07-31 05:11:51</sys_created_on>
        <sys_id>c00510a483774250fa6256a6feaad32a</sys_id>
        <sys_mod_count>308</sys_mod_count>
        <sys_name>HSC Simple List</sys_name>
        <sys_package display_value="HSC Employee Center" source="x_1093559_hsc_em_0">2a4bbb98933c42105d94371efaba10a0</sys_package>
        <sys_policy/>
        <sys_scope display_value="HSC Employee Center">2a4bbb98933c42105d94371efaba10a0</sys_scope>
        <sys_update_name>sp_widget_c00510a483774250fa6256a6feaad32a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-08-02 11:28:29</sys_updated_on>
        <template><![CDATA[<!-- Wrapper Div -->
<!-- 3 classes are being applied>(panel, b, panel-{{c.options.color}} -->
<div class="panel panel-{{::c.options.color}} b" 
     ng-if="c.data.isValid && (c.options.always_show == 'true' 
               || c.options.always_show == true || c.data.filterText 
               || c.data.list.length)">
  
  <div class="panel-heading" 
       ng-if="::!c.options.hide_header">
    <!-- -----HEADER DIV---- -->
    <h3 class="h4 panel-title">
      <span ng-if="c.options.glyph" class="headingSpan" >
        <fa name="{{::c.options.glyph}}"></fa>
      <label class="headingText" > Frequently Asked Questions </label>
    </span>
    </h3>
    <!-- <i class="fa fa-filter" 
ng-click="c.toggleFilter()" 
ng-class="{'disabled-filter': !c.showFilter}">
</i> -->
    <div class="xfilter" 
         ng-show="c.showFilter">
      <input aria-label="${Filter}" 
             ng-model="c.data.filterText" 
             ng-model-options="{debounce: 300}"
             sn-focus="c.showFilter" 
             placeholder="{{::data.filterMsg}}"
             ng-change="c.update()" 
             class="form-control input-sm 
                    filter-box"> 
    </div>

  </div>
  <!-- end header -->

  <ul class="list-group hide-x-overflow" 
      ng-style="::{maxHeight: c.getMaxHeight()}" 
      style="overflow-y: auto;" 
      ng-if="c.data.list.length > 0">
    <li ng-repeat="item in c.data.list track by item.sys_id" 
        class="list-group-item"  >
      <a ng-if="action.glyph || c.options.image_field 
                || (item.display_field.type == 'translated_html' ? 
                item.display_field.value : item.display_field.display_value)" 
          ng-click="c.showHideAnswer(item.sys_id)" 
         href="javascript:void(0)" oncontextmenu="return false;">
        
        <span ng-repeat="action in c.data.actions" href="" 
              ng-click="c.onClick($event, item, action.url, action)" 
              ng-if="action.glyph"
              class="list-action l-h-40 pull-right">
          <fa name="{{action.glyph}}" ng-class="c.getActionColor(action)"></fa>
        </span>
        <span ng-if="c.options.image_field" class="pull-left m-r"
              ng-class="{'avatar': c.options.rounded_images, 
                        'thumb-sm': c.options.rounded_images}">
          <img ng-src="{{item.image_field}}" alt="..." class="img-sm" 
               ng-class="{'img-circle': c.options.rounded_images}">
        </span>
        <div ng-switch on="item.display_field.type" 
             ng-class="{'l-h-40': !item.secondary_fields.length}">
          <span class="translated-html" ng-switch-when="translated_html" 
                ng-bind-html="item.display_field.value"></span>
          <div ng-switch-default>{{item.display_field.display_value}}</div>
        </div>
      </a>
    <div ng-if="c.isVisible(item.sys_id)">
        <small class="text-muted" ng-repeat="f in item.secondary_fields">
          <span ng-if="!$first"> • </span>
          <span ng-switch="f.type" title="{{::f.label}}">
            <span ng-switch-when="glide_date">
              <span ng-if="!f.isFuture"> <sn-day-ago date="::f.value"></sn-day-ago> </span>
              <span ng-if="f.isFuture"> {{f.display_value}}</span>
            </span>
            <span ng-switch-when="glide_date_time">
              <span ng-if="!f.isFuture"> <sn-time-ago timestamp="::f.value"></sn-time-ago></span>
              <span ng-if="f.isFuture"> {{f.display_value}}</span>
            </span>
            <span ng-switch-default="">{{f.display_value}}</span>
          </span>
        </small>
      </div>
      
    </li>
    
  </ul>
  <!-- END UL -->
  
  <div ng-if="!c.data.list.length" class="list-group-item">
    ${No records found}
  </div>
  <div class="panel-footer" ng-if="!c.options.hide_footer && c.options.maximum_entries && c.data.count > c.options.maximum_entries">
    <div class="h4 number-shown-label">{{c.getMaxShownLabel(c.options.maximum_entries, c.data.count)}}</div>
    <a class="pull-right" ng-href="?id={{c.seeAllPage}}&table={{c.options.table}}&filter={{c.options.filter}}{{c.targetPageID}}" 
       aria-label="{{::data.viewAllMsg}} - {{::c.options.title}}">${View all}</a>
  </div>
  
</div> <!-- END WRAPPER DIVE -->
 
 
 ]]></template>
    </sp_widget>
</record_update>
